import express from 'express';
import { body, validationResult } from 'express-validator';
import rateLimit from 'express-rate-limit';
import authController from '../controllers/authController.js';

const router = express.Router();

// Limiteur sp√©cifique pour les routes d'authentification
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Limiter √† 5 tentatives
  message: 'Trop de tentatives de connexion, veuillez r√©essayer plus tard'
});

// Middleware de validation des r√©sultats
const validateRequest = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ 
      statut: 'erreur', 
      errors: errors.array() 
    });
  }
  next();
};

// Middleware de d√©bogage global pour la route d'authentification
router.use((req, res, next) => {
  console.log('üîç Requ√™te re√ßue sur /api/auth :', {
    method: req.method,
    path: req.path,
    headers: req.headers,
    contentType: req.get('Content-Type'),
    body: req.body
  });
  
  // D√©finir explicitement les m√©thodes autoris√©es
  res.header('Allow', 'POST');
  res.header('Access-Control-Allow-Methods', 'POST');
  
  next();
});

// Gestion explicite des m√©thodes non autoris√©es
router.use((req, res, next) => {
  // Autoriser uniquement les requ√™tes POST
  if (req.method !== 'POST' && req.method !== 'OPTIONS') {
    console.error(`‚ùå M√©thode non autoris√©e : ${req.method}`);
    return res.status(405).json({
      statut: 'erreur',
      message: 'M√©thode non autoris√©e',
      methodesAutorisees: ['POST']
    });
  }
  next();
});

router.post('/inscription', [
  // Validation des champs
  body('nom')
    .trim()
    .isLength({ min: 2 }).withMessage('Le nom doit faire au moins 2 caract√®res')
    .escape(),
  body('prenom')
    .trim()
    .isLength({ min: 2 }).withMessage('Le pr√©nom doit faire au moins 2 caract√®res')
    .escape(),
  body('email')
    .trim()
    .isEmail().withMessage('Email invalide')
    .normalizeEmail(),
  body('motDePasse')
    .isLength({ min: 8 }).withMessage('Le mot de passe doit faire au moins 8 caract√®res')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/)
    .withMessage('Le mot de passe doit contenir au moins une majuscule, une minuscule, un chiffre et un caract√®re sp√©cial'),
  body('anneeEtude')
    .isIn(['L1', 'L2', 'L3', 'M1', 'M2', 'Doctorat']).withMessage('Ann√©e d\'√©tude invalide'),
  body('filiere')
    .trim()
    .notEmpty().withMessage('La fili√®re est obligatoire')
    .escape(),
  validateRequest
],validateRequest, authController.inscription);

// Route de connexion avec validation renforc√©e et logs
router.post('/connexion', [
  authLimiter,
  // Validation de l'email
  body('email')
    .trim()
    .isEmail().withMessage('Email invalide')
    .normalizeEmail(),
  
  // Validation du mot de passe
  body('motDePasse')
    .trim()
    .notEmpty().withMessage('Mot de passe requis')
    .isLength({ min: 8 }).withMessage('Le mot de passe doit faire au moins 8 caract√®res'),
  
  // Middleware de validation
  validateRequest
], (req, res, next) => {
  console.log(' Requ√™te de connexion d√©taill√©e :', {
    email: req.body.email,
    passwordLength: req.body.motDePasse?.length,
    headers: req.headers
  });
  next();
}, authController.connexion);

export default router;
